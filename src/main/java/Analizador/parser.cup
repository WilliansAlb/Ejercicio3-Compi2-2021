package Analizador;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

parser code
{:

    public void syntax_error(Symbol cur_token) {
        System.out.println(" Se esperaban: ");
        String esperados = "";
        for (int i = 0; i < expected_token_ids().size(); i++){
            esperados += symbl_name_from_id(expected_token_ids().get(i))+"-";
        }
        System.out.print(esperados+", pero se encontro "+cur_token.value+" en la linea"+cur_token.right+" y en la columna"+cur_token.left);
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }

    public void imp(String texto){
        System.out.println(texto);
    }

:};

terminal SUMA, RESTA, POR, ENTRE, PAR_A, PAR_C, ID, IGUAL, UMINUS, NUMERO, PUNTOC, ERRORLEX;

non terminal inicio, asignaciones, asignacion, expresion;

precedence left SUMA, RESTA;
precedence left POR, ENTRE;
precedence left UMINUS;

start with inicio;

inicio::=
    asignaciones
;

asignaciones::=
    asignaciones asignacion
|   asignacion
;

asignacion::=
    ID IGUAL expresion PUNTOC
;

expresion::=
    expresion SUMA expresion    {: imp("Se encuentra suma"); :}
|   expresion POR expresion   {: imp("Se encuentra multi"); :}
|   expresion ENTRE expresion {: imp("Se encuentra divi"); :}
|   expresion RESTA expresion {: imp("Se encuentra resta"); :}
|   RESTA expresion {: imp ("Se encuentra negativo"); :}
%prec UMINUS
|   PAR_A expresion PAR_C {: imp("Se encuentra parentesis"); :}
|   NUMERO {: imp("Se encuentra numero"); :}
|   ID {: imp("Se encuentra variable"); :}
;


package Analizador;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

parser code
{:
    String primera = "t1";
    int contador = 1;
    public void syntax_error(Symbol cur_token) {
        System.out.println(" Se esperaban: ");
        String esperados = "";
        for (int i = 0; i < expected_token_ids().size(); i++){
            esperados += symbl_name_from_id(expected_token_ids().get(i))+"-";
        }
        System.out.print(esperados+", pero se encontro "+cur_token.value+" en la linea"+cur_token.right+" y en la columna"+cur_token.left);
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal "+message+info);
    }
    
    public void report_fatal_error(Symbol cur) {
        System.out.println("unrecovered_syntax_error");
    }
    public String armando = "";
    public String operar(String izquierdo, String signo, String derecho){
        if (contador==1){
            armando+= primera+" = "+izquierdo+" "+signo+" "+derecho+"\n";
            contador++;
            return primera;
        } else {
            String variable = "t"+contador;
            armando+= variable+" = "+izquierdo+" "+signo+" "+derecho+"\n";
            contador++;
            return variable;
        }
    }
    
    public void imp(String texto){
        System.out.println(texto);
    }

:};

terminal SUMA, RESTA, POR, ENTRE, PAR_A, PAR_C, ID, IGUAL, UMINUS, NUMERO, PUNTOC, ERRORLEX;

non terminal inicio, asignaciones, asignacion;

non terminal String expresion;

precedence left SUMA, RESTA;
precedence left POR, ENTRE;
precedence left UMINUS;

start with inicio;

inicio::=
    asignaciones
;

asignaciones::=
    asignaciones asignacion
|   asignacion
;

asignacion::=
    ID:e1 IGUAL expresion:e2 PUNTOC {: armando+= e1.toString()+" = "+e2.toString()+"\n"; :}
;

expresion::=
    expresion:e1 SUMA:e2 expresion:e3    {: RESULT = operar(e1.toString(),e2.toString(),e3.toString()); :}
|   expresion:e1 POR:e2 expresion:e3   {: RESULT = operar(e1.toString(),e2.toString(),e3.toString()); :}
|   expresion:e1 ENTRE:e2 expresion:e3 {: RESULT = operar(e1.toString(),e2.toString(),e3.toString()); :}
|   expresion:e1 RESTA:e2 expresion:e3 {: RESULT = operar(e1.toString(),e2.toString(),e3.toString()); :}
|   RESTA expresion:e1 {: String au = "-"+ e1.toString(); String va = "t"+contador; contador++; armando+= va+" = "+au+"\n"; RESULT = va; :}
%prec UMINUS
|   PAR_A expresion:e1 PAR_C {: RESULT = e1.toString(); :}
|   NUMERO:e1 {: RESULT = e1.toString(); :}
|   ID:e1 {: RESULT = e1.toString(); :}
;

